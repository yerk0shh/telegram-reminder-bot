import asyncio
import logging
import os
import ssl
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, BigInteger, select

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = set(map(int, os.getenv("ADMIN_IDS", "").split(",")))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î ===
DATABASE_URL = os.getenv("DATABASE_URL")  # –±–µ–∑ ?sslmode=require

# –°–æ–∑–¥–∞—ë–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è asyncpg
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

engine = create_async_engine(
    DATABASE_URL,
    echo=False,
    connect_args={"ssl": ssl_context}  # –ø–µ—Ä–µ–¥–∞—ë–º SSL
)
SessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Asia/Almaty")

# === –ú–æ–¥–µ–ª–∏ ===
Base = declarative_base()

class Subscriber(Base):
    __tablename__ = "subscribers"
    id = Column(BigInteger, primary_key=True, unique=True, nullable=False)

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    time = Column(String, nullable=False)
    message = Column(String, nullable=False)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def send_task(task_message: str):
    async with SessionLocal() as session:
        subs = await session.execute(select(Subscriber))
        for sub in subs.scalars().all():
            try:
                await bot.send_message(sub.id, f"‚è∞ {task_message}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {sub.id}: {e}")

async def schedule_existing_tasks():
    async with SessionLocal() as session:
        tasks = await session.execute(select(Task))
        for t in tasks.scalars().all():
            hour, minute = map(int, t.time.split(":"))
            scheduler.add_job(send_task, "cron", hour=hour, minute=minute, args=[t.message])

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(CommandStart())
async def start(message: types.Message):
    async with SessionLocal() as session:
        exists = await session.get(Subscriber, message.from_user.id)
        if not exists:
            session.add(Subscriber(id=message.from_user.id))
            await session.commit()
    await message.answer("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")

@dp.message(Command("add"))
async def add_task(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á.")
        return
    try:
        _, time_str, *task_text = message.text.split(" ")
        hour, minute = map(int, time_str.split(":"))
        task_message = " ".join(task_text)

        async with SessionLocal() as session:
            task = Task(time=time_str, message=task_message)
            session.add(task)
            await session.commit()

        scheduler.add_job(send_task, "cron", hour=hour, minute=minute, args=[task_message])
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {time_str} ‚Üí {task_message}")

    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: `/add 10:00 —Ç–µ–∫—Å—Ç`", parse_mode="Markdown")

@dp.message(Command("list"))
async def list_tasks(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    async with SessionLocal() as session:
        tasks = await session.execute(select(Task))
        tasks = tasks.scalars().all()
        if not tasks:
            await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return
        text = "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
        for i, t in enumerate(tasks, 1):
            text += f"{i}. {t.time} ‚Üí {t.message}\n"
        await message.answer(text)

@dp.message(Command("delete"))
async def delete_task(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        _, index_str = message.text.split(" ")
        index = int(index_str) - 1

        async with SessionLocal() as session:
            tasks = await session.execute(select(Task))
            tasks = tasks.scalars().all()
            if index < 0 or index >= len(tasks):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            task = tasks[index]
            await session.delete(task)
            await session.commit()

        await message.answer(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task.time} ‚Üí {task.message}")
    except:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: `/delete 1`")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    await schedule_existing_tasks()
    scheduler.start()
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
