import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import os
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Asia/Almaty")

# –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É)
subscribers = set()

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏)
tasks = []

# üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫)
ADMINS = {827961067}

# === /start ===
@dp.message(CommandStart())
async def start(message: types.Message):
    subscribers.add(message.from_user.id)
    await message.answer("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")

# === /add ===
@dp.message(Command("add"))
async def add_task(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á.")
        return

    try:
        _, time_str, *task_text = message.text.split(" ")
        hour, minute = map(int, time_str.split(":"))
        task_message = " ".join(task_text)

        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        async def task():
            for user_id in subscribers:
                await bot.send_message(user_id, f"‚è∞ {task_message}")

        job = scheduler.add_job(task, "cron", hour=hour, minute=minute)
        tasks.append({"time": time_str, "message": task_message, "job": job})

        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {time_str} ‚Üí {task_message}")

    except Exception as e:
        logging.error(e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –§–æ—Ä–º–∞—Ç: `/add 10:00 —Ç–µ–∫—Å—Ç`", parse_mode="Markdown")

# === /list ===
@dp.message(Command("list"))
async def list_tasks(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    if not tasks:
        await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    text = "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
    for i, t in enumerate(tasks, 1):
        text += f"{i}. {t['time']} ‚Üí {t['message']}\n"
    await message.answer(text)

# === /delete ===
@dp.message(Command("delete"))
async def delete_task(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    try:
        _, index_str = message.text.split(" ")
        index = int(index_str) - 1
        task = tasks.pop(index)
        task["job"].remove()
        await message.answer(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task['time']} ‚Üí {task['message']}")
    except:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: `/delete 1`")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    scheduler.start()
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
